

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>I am CHP</title>
  <subtitle>This is chp's blog!</subtitle>
  <updated>2024-10-10T20:52:35+08:00</updated>
  <author>
    <name>chp</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 chp </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>channel内部实现</title>
    <link href="http://localhost:4000/posts/channel/" rel="alternate" type="text/html" title="channel内部实现" />
    <published>2024-10-10T20:42:12+08:00</published>
  
    <updated>2024-10-10T20:42:12+08:00</updated>
  
    <id>http://localhost:4000/posts/channel/</id>
    <content src="http://localhost:4000/posts/channel/" />
    <author>
      <name>chp</name>
    </author>

  
    
    <category term="go" />
    
  

  <summary>源码：https://cs.opensource.google/go/go/+/refs/tags/go1.23.2:src/runtime/chan.go

channel内部结构

type hchan struct {
	qcount   uint           // total data in the queue
	dataqsiz uint           // size of the circular queue
	buf      unsafe.Pointer // points to an array of dataqsiz elements
	elemsize uint16
	closed   uint32
	timer    *timer // timer feeding this chan
	elemtype *_type // element typ...</summary>

  </entry>

  
  <entry>
    <title>go标准库-sort</title>
    <link href="http://localhost:4000/posts/standard_sort/" rel="alternate" type="text/html" title="go标准库-sort" />
    <published>2024-09-09T23:46:12+08:00</published>
  
    <updated>2024-09-09T23:46:12+08:00</updated>
  
    <id>http://localhost:4000/posts/standard_sort/</id>
    <content src="http://localhost:4000/posts/standard_sort/" />
    <author>
      <name>chp</name>
    </author>

  
    
    <category term="go" />
    
  

  <summary>该包用于给slice或者用户自定义的集合进行排序

排序底层算法

go的底层排序算法使用的是pattern-defeat quicksort(pdqSort)算法，PDQSort（Pattern-defeating quicksort）是一种现代的排序算法，它结合了快速排序（Quicksort）、插入排序（Insertion Sort）和堆排序（Heapsort）的优点，并通过模式识别和优化来避免最坏情况的性能退化。

go source code

pdqSort

Types（类型）

sort.Interface

​	sort.Interface是Sort包中的一个接口，该接口定义了3个方法：


  Len() int : 返回切片的长度
  Less(i,j int) bool:  用于判断切片中两个值的大小
  Swap(i,j int): 交换索引i和j处的元素

...</summary>

  </entry>

  
  <entry>
    <title>代理和反向代理</title>
    <link href="http://localhost:4000/posts/proxy/" rel="alternate" type="text/html" title="代理和反向代理" />
    <published>2024-08-23T13:13:12+08:00</published>
  
    <updated>2024-09-09T23:49:50+08:00</updated>
  
    <id>http://localhost:4000/posts/proxy/</id>
    <content src="http://localhost:4000/posts/proxy/" />
    <author>
      <name>chp</name>
    </author>

  
    
    <category term="nginx" />
    
  

  <summary>代理（Proxy）

代理服务器是一个中间服务器，它位于客户端和目标服务器之间，代表客户端向目标服务器发送请求，并将目标服务器的响应返回给客户端。代理服务器的主要功能包括：


  隐私保护：代理服务器可以隐藏客户端的真实 IP 地址，从而保护用户隐私。
  访问控制：代理服务器可以限制用户访问某些网站或资源。
  缓存：代理服务器可以缓存常用资源，从而加快访问速度并减少带宽消耗。
  内容过滤：代理服务器可以过滤不良内容或广告。


假设你在浏览器中访问一个网站，浏览器的请求首先发送到代理服务器，代理服务器再将请求转发给目标网站。目标网站的响应返回给代理服务器，代理服务器再将响应转发给浏览器。

反向代理（Reverse Proxy）

反向代理服务器也是一个中间服务器，但它位于目标服务器和客户端之间，代表目标服务器接收客户端的请求，并将请求转发给目标服务器。反向代理服务器的主要功...</summary>

  </entry>

  
  <entry>
    <title>docker入门</title>
    <link href="http://localhost:4000/posts/docker%E5%85%A5%E9%97%A8/" rel="alternate" type="text/html" title="docker入门" />
    <published>2024-08-23T13:05:12+08:00</published>
  
    <updated>2024-08-23T13:05:12+08:00</updated>
  
    <id>http://localhost:4000/posts/docker%E5%85%A5%E9%97%A8/</id>
    <content src="http://localhost:4000/posts/docker%E5%85%A5%E9%97%A8/" />
    <author>
      <name>chp</name>
    </author>

  
    
    <category term="Docker" />
    
  

  <summary>docker常用命令

docker images # 显示所有容器镜像
docker ps -all # 列出所有的docker容器（所有状态）
docker pull # 拉取镜像
docker start|stop # 启动或者停止镜像
docker rm docker_name # 删除容器
docker rmi image_name # 删除镜像
docker logs -f docker_name # 查看docker容器日志
docker run --name container_name image_name # 通过镜像启动容器，并为容器命名
docker run -i -t -d -P -p -e key=value docker_name image command # -t 在新容器内制定一个伪终端或终端 -i 允许你对容器内的标准输入进行交互 -d 后台模型...</summary>

  </entry>

  
  <entry>
    <title>常用shell命令</title>
    <link href="http://localhost:4000/posts/%E5%B8%B8%E7%94%A8shell%E5%91%BD%E4%BB%A4/" rel="alternate" type="text/html" title="常用shell命令" />
    <published>2024-08-22T15:21:12+08:00</published>
  
    <updated>2024-08-22T15:21:12+08:00</updated>
  
    <id>http://localhost:4000/posts/%E5%B8%B8%E7%94%A8shell%E5%91%BD%E4%BB%A4/</id>
    <content src="http://localhost:4000/posts/%E5%B8%B8%E7%94%A8shell%E5%91%BD%E4%BB%A4/" />
    <author>
      <name>chp</name>
    </author>

  
    
    <category term="Shell" />
    
  

  <summary>curl命令

curl 是一个用于在命令行中进行数据传输的工具，支持多种协议（如 HTTP、HTTPS、FTP 等）。它广泛用于测试和调试网络连接、下载文件、与 API 交互等。以下是一些常见的 curl 命令示例和用法：

curl https://example.com # get方式请求数据
curl -X post --data &amp;#39;param=value&amp;#39; https://example.com/ # post方式请求数据
curl -X post -H &amp;quot;Content-Type:application/json&amp;quot; -d &amp;#39;{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;,&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;}&amp;#39; http://example.com # json 方式请求数据


ls命令

ls 用于展示文件夹中的内容

ls # List files 
ls -l # list file...</summary>

  </entry>

</feed>


